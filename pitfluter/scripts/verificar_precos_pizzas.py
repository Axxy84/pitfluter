#!/usr/bin/env python3
"""
Script para verificar pre√ßos das pizzas no banco de dados Supabase
e testar a l√≥gica de c√°lculo de 2 sabores
"""

import os
import sys
from supabase import create_client, Client

# Configura√ß√µes do Supabase (voc√™ precisa configurar estas vari√°veis)
SUPABASE_URL = "https://your-project.supabase.co"  # Substitua pela sua URL
SUPABASE_KEY = "your-anon-key"  # Substitua pela sua chave

def main():
    print("üîç VERIFICANDO PRE√áOS DAS PIZZAS NO BANCO DE DADOS")
    print("=" * 60)
    
    try:
        # Conectar ao Supabase
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # Buscar produtos usando a query correta (mesma do Flutter)
        print("\nüì¶ BUSCANDO PRODUTOS...")
        response = supabase.table('produtos_produto').select('*').execute()
        produtos = response.data
        
        print(f"‚úÖ {len(produtos)} produtos encontrados")
        
        # Filtrar apenas pizzas
        pizzas = []
        for produto in produtos:
            nome = produto.get('nome', '').lower()
            categoria = produto.get('categoria', '').lower() if produto.get('categoria') else ''
            
            # Identificar pizzas
            if ('pizza' in nome or 
                'margherita' in nome or 
                'calabresa' in nome or 
                'mozzarella' in nome or
                'vegetariana' in nome or
                'napolitana' in nome or
                'portuguesa' in nome or
                categoria == 'pizza' or
                categoria == 'pizzas'):
                pizzas.append(produto)
        
        print(f"\nüçï PIZZAS ENCONTRADAS: {len(pizzas)}")
        print("-" * 50)
        
        # Listar todas as pizzas com pre√ßos
        pizzas_ordenadas = sorted(pizzas, key=lambda x: x.get('preco', 0))
        
        for i, pizza in enumerate(pizzas_ordenadas, 1):
            nome = pizza.get('nome', 'N/A')
            preco = pizza.get('preco', 0)
            categoria = pizza.get('categoria', 'N/A')
            ativo = pizza.get('ativo', False)
            
            status = "‚úÖ ATIVO" if ativo else "‚ùå INATIVO"
            print(f"{i:2d}. {nome}")
            print(f"    üí∞ Pre√ßo: R$ {preco:.2f}")
            print(f"    üìÇ Categoria: {categoria}")
            print(f"    üîÑ Status: {status}")
            print()
        
        # Testar combina√ß√µes de 2 sabores com pre√ßos diferentes
        print("\nüî¢ TESTANDO L√ìGICA DE 2 SABORES:")
        print("=" * 60)
        
        # Multiplicadores de tamanho (mesmos do Flutter)
        multiplicadores = {
            'Pequena': 0.65,
            'M√©dia': 0.85,
            'Grande': 1.0,
            'Fam√≠lia': 1.3
        }
        
        # Encontrar pizzas com pre√ßos diferentes para teste
        if len(pizzas_ordenadas) >= 2:
            pizza1 = pizzas_ordenadas[0]  # Mais barata
            pizza2 = pizzas_ordenadas[-1]  # Mais cara
            
            nome1 = pizza1.get('nome', 'Pizza 1')
            preco1 = pizza1.get('preco', 0)
            nome2 = pizza2.get('nome', 'Pizza 2') 
            preco2 = pizza2.get('preco', 0)
            
            print(f"\nüîç TESTANDO: {nome1} (R$ {preco1:.2f}) + {nome2} (R$ {preco2:.2f})")
            print("-" * 50)
            
            for tamanho, multiplicador in multiplicadores.items():
                preco_final1 = preco1 * multiplicador
                preco_final2 = preco2 * multiplicador
                preco_maior = max(preco_final1, preco_final2)
                
                print(f"üìè Tamanho {tamanho} (x{multiplicador}):")
                print(f"   ‚Ä¢ {nome1}: R$ {preco1:.2f} √ó {multiplicador} = R$ {preco_final1:.2f}")
                print(f"   ‚Ä¢ {nome2}: R$ {preco2:.2f} √ó {multiplicador} = R$ {preco_final2:.2f}")
                print(f"   ‚Ä¢ üèÜ MAIOR PRE√áO: R$ {preco_maior:.2f}")
                print(f"   ‚Ä¢ ‚úÖ L√≥gica correta: {'SIM' if preco_maior == max(preco_final1, preco_final2) else 'N√ÉO'}")
                print()
        
        # Verificar se h√° pizzas com pre√ßos muito pr√≥ximos
        print("\n‚ö†Ô∏è VERIFICA√á√ÉO DE PRE√áOS SIMILARES:")
        print("-" * 50)
        
        precos_similares = []
        for i, pizza1 in enumerate(pizzas_ordenadas):
            for pizza2 in pizzas_ordenadas[i+1:]:
                preco1 = pizza1.get('preco', 0)
                preco2 = pizza2.get('preco', 0)
                diferenca = abs(preco1 - preco2)
                
                if diferenca < 2.0:  # Diferen√ßa menor que R$ 2,00
                    precos_similares.append({
                        'pizza1': pizza1.get('nome'),
                        'preco1': preco1,
                        'pizza2': pizza2.get('nome'), 
                        'preco2': preco2,
                        'diferenca': diferenca
                    })
        
        if precos_similares:
            print("‚ö†Ô∏è  Pizzas com pre√ßos muito similares encontradas:")
            for similar in precos_similares[:5]:  # Mostrar apenas 5
                print(f"   ‚Ä¢ {similar['pizza1']} (R$ {similar['preco1']:.2f}) vs {similar['pizza2']} (R$ {similar['preco2']:.2f}) = Diff: R$ {similar['diferenca']:.2f}")
        else:
            print("‚úÖ N√£o h√° pizzas com pre√ßos muito similares")
            
        print("\n" + "=" * 60)
        print("‚úÖ VERIFICA√á√ÉO CONCLU√çDA")
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        print("\nüí° DICAS:")
        print("1. Verifique se as vari√°veis SUPABASE_URL e SUPABASE_KEY est√£o corretas")
        print("2. Instale a biblioteca supabase: pip install supabase")
        print("3. Verifique se a tabela 'produtos_produto' existe no banco")

if __name__ == "__main__":
    main()